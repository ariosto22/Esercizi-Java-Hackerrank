https://www.hackerrank.com/challenges/prime-checker/problem?isFullScreen=true

import java.io.*;
import java.util.*;

class Prime {
    
    public boolean checkPrime(int... n) {
        for(int i = 0; i < n.length; i++) {
            
            if(n[i] == 2) {
                return true;
            }
            
            if(n[i] % 2 == 0) { //se n sono pari, non possono essere primi
                return false;
            } 
        }
        return true;
       
    }
}

public class Solution {

    public static void main(String[] args) {
        try{
            
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        
        int n1=Integer.parseInt(br.readLine());
        int n2=Integer.parseInt(br.readLine());
        int n3=Integer.parseInt(br.readLine());
        int n4=Integer.parseInt(br.readLine());
        int n5=Integer.parseInt(br.readLine());
        
        Prime primeNumbers = new Prime();
        primeNumbers.checkPrime(n1);
        primeNumbers.checkPrime(n1,n2);
        primeNumbers.checkPrime(n1,n2,n3);
        primeNumbers.checkPrime(n1,n2,n3,n4,n5);
            
        Method[] methods = Prime.class.getDeclaredMethods();
        Set<String> set = new HashSet<>();
        boolean overload = false;
        
        for(int i = 0; i < methods.length; i++)
        {
            if(set.contains(methods[i].getName()))
            {
                overload=true;
                break;
            }
            set.add(methods[i].getName());
            
        }
        if(overload)
        {
            throw new Exception("Overloading not allowed");
        }
        }
        catch(Exception e)
        {
            System.out.println(e);
        }
    }
    
}